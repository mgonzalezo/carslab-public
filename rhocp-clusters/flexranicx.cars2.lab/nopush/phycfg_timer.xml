<?xml version="1.0"?>
<!--                                                                                         -->
<!-- INTEL CONFIDENTIAL -->
<!-- Copyright 2009-2020 Intel Corporation All Rights Reserved. -->
<!--  -->
<!-- The source code contained or described herein and all documents related to the -->
<!-- source code ("Material") are owned by Intel Corporation or its suppliers or -->
<!-- licensors. Title to the Material remains with Intel Corporation or its -->
<!-- suppliers and licensors. The Material may contain trade secrets and proprietary -->
<!-- and confidential information of Intel Corporation and its suppliers and -->
<!-- licensors, and is protected by worldwide copyright and trade secret laws and -->
<!-- treaty provisions. No part of the Material may be used, copied, reproduced, -->
<!-- modified, published, uploaded, posted, transmitted, distributed, or disclosed -->
<!-- in any way without Intel's prior express written permission. -->
<!--  -->
<!-- No license under any patent, copyright, trade secret or other intellectual -->
<!-- property right is granted to or conferred upon you by disclosure or delivery -->
<!-- of the Materials, either expressly, by implication, inducement, estoppel or -->
<!-- otherwise. Any license under such intellectual property rights must be -->
<!-- express and approved by Intel in writing. -->
<!--  -->
<!-- Unless otherwise agreed by Intel in writing, you may not remove or alter this -->
<!-- notice or any other notice embedded in Materials by Intel or Intel's suppliers -->
<!-- or licensors in any way. -->
<!--  -->
<!--  version: RefPHY-22.11 -->
<!--                                                                                         -->
<PhyConfig>
    <version>22.11</version>

    <Api>
        <!--  Maximum number of successive missing API allowed before triggering PHY stop (-1 is infinite) -->
        <successiveNoApi>15</successiveNoApi>
        <!--  WLS Wakeup Secondary process mode. 1: Wakeup using Semaphore. 0: Do usleep and wakeup using atomic variable -->
        <wls_sema_wake_up>1</wls_sema_wake_up>
        <!-- Number of WLS instances to open. Range 1-16. This is so that different L2 applications can talk to single L1 application -->
        <wls_num_instances>1</wls_num_instances>
        <!-- Number of blocks to pre-allocate per cell in UL direction to make it thread safe and lockless (Range: 8-48) -->
        <wls_ul_queue_depth>48</wls_ul_queue_depth>
        <!-- Align size for WLS memzone. This needs to be in powers of 2. Range -> 64 to 1GB -->
        <!-- If 0, then 1GB is used -->
        <wls_memory_align>0</wls_memory_align>
        <!-- Full path to wls device used for transport of MAC-PHY API (e.g. wls0) -->
        <wls_dev_name0>wls0</wls_dev_name0>
        <!-- Mapping of WLS Instance to Cell ID. This is in Hex -->
        <wls_cell_mapping0>0xFFF</wls_cell_mapping0>
        <!-- MAC managed WLS Memory size. This is used for all API buffer allocations -->
        <wlsMacMemorySize>0x7EA80000</wlsMacMemorySize>
        <!-- L1 managed WLS Memory size. This is used for SRS weight storage. For 64x64 usecase and 6 cells (with 512 users per cell) use 0x18000000 -->
        <wlsPhyMemorySize>0x78000000</wlsPhyMemorySize>
    </Api>

    <PhyLogs>
        <CoreDumpEnable>0</CoreDumpEnable>
        <IqLogs>
            <dlIqLog>0</dlIqLog>
            <ulIqLog>0</ulIqLog>
        </IqLogs>
        <DebugLogs>
            <phyMlog>1</phyMlog>
            <phyStats>0</phyStats>
        </DebugLogs>
        <dbgPrintTime>0</dbgPrintTime>
    </PhyLogs>

    <!-- This section defines all DPDK related parameters used for DPDK initialization -->
    <DPDK>
        <!--  name of DPDK memory zone, needs to align between primary and secondary process -->
        <dpdkFilePrefix>gnb0</dpdkFilePrefix>
        <!--  DPDK memory size allocated from hugepages [MB]  [default: 2048] -->
        <dpdkMemorySize>8144</dpdkMemorySize>
        <!--  DPDK IOVA Mode used for DPDK initialization. If 0, then PA mode. Else VA Mode -->
        <dpdkIovaMode>0</dpdkIovaMode>
        <!--  DPDK FEC BBDEV to use             [0 - SW, 1 - HW accelerator, 2 - Both] -->
        <dpdkBasebandFecMode>1</dpdkBasebandFecMode>
        <!--  DPDK BBDev name added to the passlist. The argument format is <[domain:]bus:devid.func> -->
        <dpdkBasebandDevice>0000:8b:01.7</dpdkBasebandDevice>
        <!-- VFIO token for DPDK EAL commandline, required when PF is bound to vfio-pci -->
        <!--dpdkVfioVfToken>00112233-4455-6677-8899-aabbccddeeff<dpdkVfioVfToken>-->
        <!--  TB mode enable [0 - CB mode, 1 - TB mode]  -->
        <tbModeEnable>0</tbModeEnable>
    </DPDK>

    <Radio>
        <!-- Enable/disable radio               [0 - disable] -->
        <radioEnable>0</radioEnable>
    </Radio>

    <PhyVars>
        <!-- Pipeline SPR configuration-->
        <!-- 0: disable, 1: enable -->
        <PiplineSPR>0</PiplineSPR>
        <!-- to boost precoding power -->
        <!-- 0: no power boost, 1: boost precoding power -->
        <PrecodingPowerBoost>0</PrecodingPowerBoost>
        <!-- AGC target of signal amplitude  -->
        <agcTarget>8192</agcTarget>
        <!-- UL amplitude to complicance with radio. Rx0DbfsRadioPower is the radio power in dBm corresponding to 0 DBFS multiplied by 2^16 (converting float to int32)-->
        <Rx0DbfsRadioPower>-3781794</Rx0DbfsRadioPower>
        <Pdsch>
            <!-- Split PDSCH symbol processing -->
            <PdschSymbolSplit>0</PdschSymbolSplit>

            <!-- Enable the PDSCH symbol process to OFDM symbol based split, otherwise UE group/UE based split. 0 disable, 1 enable -->
            <PdschOfdmSplitEnable>0</PdschOfdmSplitEnable>

            <!-- Max number of parallel tasks that the DL FEC Encoder is split into. Number needs to be between 1 and 4. If wrong value entered, it will be defaulted to 1.  -->
            <!-- For hardware offload (using fpga / eAsic) it will be defaulted to 1.  -->
            <FecEncSplit>1</FecEncSplit>

            <!-- Bypass FEC Encoder. This is to mostly for some benchmarking purposes and is not real scenarios -->
            <FecEncBypass>0</FecEncBypass>
        </Pdsch>
        <BeamWeight>
            <!-- Split PDSCH DL beamforiming weight generation processing -->
            <PdschDlWeightSplit>0</PdschDlWeightSplit>

            <!-- Split PUSCH UL beamforiming weight generation processing -->
            <PuschUlWeightSplit>0</PuschUlWeightSplit>

            <!-- DL beamforming weight matrix gen algo choose -->
            <!-- 0: ZF based weight gen algo, 1: dftcodebook based weight gen algo -->
            <DLDFTBfWeightAlgoType>0</DLDFTBfWeightAlgoType>

            <!-- beamforming weight matrix gen RB pick granularity -->
            <DLBfWeightGenGranularity>1</DLBfWeightGenGranularity>

            <!-- beamforming weight matrix gen RB pick out granularity -->
            <DLBfWeightGenOutGranularity>1</DLBfWeightGenOutGranularity>

            <!-- wether DFT beamforming weight matrix gen use oversample codebook -->
            <DLBfIsOverSample>0</DLBfIsOverSample>

            <!-- the oversample rate of the horizontal ant  -->
            <DLRxAntHorizontalOverSample>1</DLRxAntHorizontalOverSample>

            <!-- the oversample rate of the vertical ant  -->
            <DLRxAntVerticalOverSample>1</DLRxAntVerticalOverSample>

            <!-- the beam select type for DFT beamforming weight matrix gen -->
            <DLBeamSelectType>0</DLBeamSelectType>

            <!-- the max rb num is used for DFT beamforming weight matrix gen -->
            <DLDFTMaxRBUsed>273</DLDFTMaxRBUsed>

            <!-- UL beamforming weight matrix gen algo choose -->
            <!-- 0: ZF based weight gen algo, 1: dftcodebook based weight gen algo -->
            <ULDFTBfWeightAlgoType>0</ULDFTBfWeightAlgoType>

            <!-- beamforming weight matrix gen RB pick granularity-->
            <ULBfWeightGenGranularity>1</ULBfWeightGenGranularity>

            <!-- beamforming weight matrix gen RB pick out granularity -->
            <ULBfWeightGenOutGranularity>0</ULBfWeightGenOutGranularity>

            <!--  Number of Rx Antenna Vertiacl elements    [4, 8, 64] -->
            <RxAntVertical>1</RxAntVertical>
            <!--  Number of Rx Antenna Horizontal elements  [4, 8, 64] -->
            <RxAntHorizontal>1</RxAntHorizontal>
            <!--  Number of Rx Antenna Polarization Setting [1, 2] -->
            <RxAntPolarization>1</RxAntPolarization>

            <!--  Enable Beam Weight Processing all the time regardless of SRS channel present or not -->
            <!--  This is mainly done for profiling purposes -->
            <BeamWeightSrsBypass>1</BeamWeightSrsBypass>

            <!--  Bypass entire Beam Weight generation function from pipeline -->
            <!--  This is mainly done for profiling purposes -->
            <BeamWeightBypass>0</BeamWeightBypass>
        </BeamWeight>
        <Pusch>
            <!-- Split processing for ULDecompression for PUSCH -->
            <PuschDecompSplit>0</PuschDecompSplit>
            <!-- Split processing for Channel Estimation for PUSCH -->
            <PuschChanEstSplit>0</PuschChanEstSplit>

            <!-- Split processing for MMSE for PUSCH -->
            <PuschMmseSplit>0</PuschMmseSplit>

            <!-- Split processing for LLR Rx for PUSCH -->
            <PuschLlrRxSplit>0</PuschLlrRxSplit>

            <!-- BBDEV FEC Decoder Early Termination disabled. If 1, then programmed number of iterations are run from MAC PHY API regardless of CRC PASS -->
            <FecDecEarlyTermDisable>0</FecDecEarlyTermDisable>

            <!-- FEC LDPC Decoder Number of iterations. If 0 then Number of iterations is set to 10. Else this value is used -->
            <FecDecNumIter>12</FecDecNumIter>

            <!-- Max number of parallel tasks that the UL FEC Decoder is split into. Number needs to be between 1 and 4. If wrong value entered, it will be defaulted to 1. -->
            <!-- For hardware offload (using fpga / eAsic) it will be defaulted to 1.  -->
            <FecDecSplit>1</FecDecSplit>

            <!-- Bypass FEC Decoder. This is to mostly for some benchmarking purposes and is not real scenarios -->
            <FecDecBypass>0</FecDecBypass>

            <!-- Only for terasic. Number of decimal digits of LLR fixed point output. If 0 then this value is set to 2, which means LLR is 8S2. Else this value is used -->
            <llrOutDecimalDigit>2</llrOutDecimalDigit>

            <!-- Indicates saturated bits for LLR demapping, valid range 2~8 -->
            <llrSaturatedBits>8</llrSaturatedBits>

            <!-- LLR soft bit compression  -->
            <!-- 0: disable, 1: enable -->
            <ULLdpcLlrComp>0</ULLdpcLlrComp>

            <!-- SNR Threshold for IRC. If -100, then IRC will be disabled -->
            <IrcEnableThreshold>-100</IrcEnableThreshold>

            <!-- 0: IRC switch base on SNR metric in UEgroup -->
            <!-- 1: IRC switch base on SNR metric per 4RB in UEgroup -->
            <IrcDynamicFlag>0</IrcDynamicFlag>

            <!-- PUSCH Noise Scaling -->
            <!-- Used to scale measured noise to account for ChanEst errors for mu=0 and 2 layers. -->
            <!-- Valid values = 1, 2, 3, 4 -->
            <PuschNoiseScale>2</PuschNoiseScale>

            <!-- frequency interpolation method for PUSCH CE -->
            <!-- bit 0: 0: 1RB sinc interpolation 1: 4RB sinc interpolation -->
            <!-- bit 1: 0: disable pre - interpolation 1: enable pre - interpolation -->
            <CEInterpMethod>2</CEInterpMethod>

            <!-- frequency offset compensation -->
            <!-- 0: disable, 1: enable -->
            <CEFocEnable>0</CEFocEnable>

            <!-- frequency offset compensation granularity in terms of RE-->
            <CEFocGranularity>768</CEFocGranularity>

            <!-- time domain linear interpolation for PUSCH enable = 1, disable = 0-->
            <PuschLinearInterpEnable>0</PuschLinearInterpEnable>

            <!-- time domain linear interpolation granularity for PUSCH cell0, cell1 ... cellx respectively -->
            <!-- PuschLinearInterpGranularityAll - Use this value for all Cells -->
            <!-- PuschLinearInterpGranularity0 - Use this value for Cell0 -->
            <!-- PuschLinearInterpGranularity1 - Use this value for Cell1 and so on -->
            <!-- PuschLinearInterpGranularityAll will superced PuschLinearInterpGranularityX (where X is CellId) -->
            <!-- 0 - Linear, 1 - Linear2, 2 - Linear3, 3 - Linear 4, 4 - Linear6, 5 - Use internal Doppler estimator to detect best value, 99 - nearest -->
            <!-- use comma to separte the values if want to apply differnt granularity for differnt UE groups -->
            <PuschLinearInterpGranularityAll>4</PuschLinearInterpGranularityAll>

            <!-- Flag to enable/disable UL report of received PUSCH DMRS amplitude-->
            <DMRSPwrReportEna>0</DMRSPwrReportEna>

            <!-- Force Enable IRC: 0: Dont change pipeline. 1: Force Disable, 2: Force Enable -->
            <!--  This is mainly done for profiling purposes -->
            <EnableIrc>0</EnableIrc>
        </Pusch>
        <Pucch>
            <!-- Split processing for PUCCH -->
            <PucchSplit>0</PucchSplit>
            <!-- PUCCH F0 Noise estimation Algorithm choice. 0: Use all unused cyclic shift. 1: Use max of 3 cyclic shift -->
            <PucchF0NoiseEstType>0</PucchF0NoiseEstType>
            <!-- PUCCH F0 Multi UE Algorithm choice. 0: Use existing algorithm 1: Use multi UE algorithm -->
            <PucchF0MultiUeAlgo>0</PucchF0MultiUeAlgo>
            <!-- PUCCH AGC target of signal amplitude  -->
            <PucchagcTarget>8192</PucchagcTarget>	    
        </Pucch>
        <Srs>
            <!-- Split processing for SRS CE -->
            <SrsCeSplit>0</SrsCeSplit>
            <!--  SRS FFT Enable Switch based on bbdev capability [0 - legacy SRS processing using DFT/MMSE, 1 - SRS processing based on FFT bbdev capability (if capability doesn't exist fallback to legacy mode)] -->
            <srsFftEnabled>0</srsFftEnabled>
            <!--  SRS FFT SNR EST Method Switch      [1 - FD1, 2 - FD2] -->
            <srsFftSNRestMethod>2</srsFftSNRestMethod>
            <!--  SRS FFT SNR EST central_part_rs Switch     [0 - not enable, 1 - enable] -->
            <srsFftSNRestCentralPartRs>1</srsFftSNRestCentralPartRs>
            <!--  SRS FFT Taylor window filter Switch     [0 - disable, 1 - force enable, 2 - auto enable] -->
            <srsFftTaylorWinFilter>2</srsFftTaylorWinFilter>
            <!--  SRS AGC Switch     [0 - disable, 1 - enable] -->
            <SrsAgcEnabled>0</SrsAgcEnabled>
            <!--  SRS AGC Target     [0 - disable, 1 - enable] -->
            <SrsAgcTarget>8192</SrsAgcTarget>
            <!--  SRS DFT est result fill full Bandwidth  [0 - disable, 1 - enable] -->
            <SrsDftFillFullBand>0</SrsDftFillFullBand>
            <!--  SRS AGC Method Choose  [1 - Method1(average), 2 - Method2(12pick)] -->
            <SrsAgcMethodChoose>2</SrsAgcMethodChoose>
        </Srs>
        <Prach>
            <!-- Prach Detection Threshold. If non zero, computed value is used. -->
            <prachDetectThreshold>0</prachDetectThreshold>
            <!-- prach detect fo check -->
            <!-- 0: disable, 1: enable -->
            <prachDetectFoCheck>0</prachDetectFoCheck>
            <!-- prach Threshold calculating method -->
            <prachThresholdMethod>0</prachThresholdMethod>
            <!-- prach detect window shift  default:0 -->
            <prachDTWindowShift>0</prachDTWindowShift>
            <!-- Number of Short Format combine :[1 2 3 4 6] -->
            <prachMaxNcombine>1</prachMaxNcombine>
            <!-- prach FFT size selection: 0: larger size(2048/1024); 1: shorter size(1024/256) -->
            <prachFFTSel>0</prachFFTSel>
        </Prach>
        <Urllc>
            <!-- For URLLC cells, setting this field to 1 will split the FEC processing by 2 (half in software and half in hardware). Default: 0 Disabled -->
            <UrllcPuschFecSplit>0</UrllcPuschFecSplit>

            <!-- If there are URLLC Cells, this field indicates how many BBDEV Queue Ids to allocate for URLLC. All others are for eMBB. Default: 0 Disabled -->
            <!-- The lower the queue ID, the higher the priority to process these -->
            <UrllcBbdevIdEnd>0</UrllcBbdevIdEnd>
        </Urllc>
        <Common>
            <!-- Phy Start / Stop feature. 0: Disable, 1: Enable -->
            <!-- If enabled, L1 will start sending APIs as soon as first cell arrives. This is kept for backward compatibility -->
            <phyStartStop>0</phyStartStop>

            <!-- Memory Type used by L1 pipeline. 0: Heap, 1: DPDK memory -->
            <phyMemoryType>0</phyMemoryType>
        </Common>
    </PhyVars>

    <MlogVars>
        <!-- Number of subframes are logged into Mlog. Needs to be a power of 2 -->
        <MlogSubframes>128</MlogSubframes>
        <!-- Number of Cores being logged into Mlog -->
        <MlogCores>40</MlogCores>
        <!-- Size of each subframe (in bytes) -->
        <MlogSize>10000</MlogSize>
    </MlogVars>

    <!-- CPU Binding to Application Threads -->
    <Threads>
        <!-- System Threads (Single core id value): Core, priority, Policy [0: SCHED_FIFO 1: SCHED_RR] -->
        <systemThread>2, 0, 0</systemThread>

        <!-- WLS Mac-to-Phy Non Realtime API Processing Thread (Single core id value): Core, priority, Policy [0: SCHED_FIFO 1: SCHED_RR] -->
        <!-- Mesages like PHY_CONFIG, PHY_START, PHY_STOP, PHY_SHUTDOWN, etc are processed on this core. All others are processed in BBU Cores -->
        <wlsNrtThread>2, 0, 0</wlsNrtThread>

        <!-- Timer Thread (Single core id value): Core, priority, Policy [0: SCHED_FIFO 1: SCHED_RR] -->
        <timerThread>4, 96, 0</timerThread>

        <!-- FPGA for LDPC Thread (Single core id value): Core, priority, Policy [0: SCHED_FIFO 1: SCHED_RR] -->
        <FpgaDriverCpuInfo>3, 96, 0</FpgaDriverCpuInfo>

        <!-- FPGA for Front Haul (FFT / IFFT) Thread (Single core id value): Core, priority, Policy [0: SCHED_FIFO 1: SCHED_RR] -->
        <!-- This thread should be created for timer mode and hence can be same core as LDPC polling core -->
        <FrontHaulCpuInfo>3, 96, 0</FrontHaulCpuInfo>

        <!-- DPDK Radio Master Thread (Single core id value): Core, priority, Policy [0: SCHED_FIFO 1: SCHED_RR] -->
        <radioDpdkMaster>4, 99, 0</radioDpdkMaster>
    </Threads>

    <BbuPoolConfig>
        <!-- If set to 1, BBU Pool cores, return control to kernel after task is completed. Else it will always be in user space without going to sleep -->
        <!-- It is mainly used when setting core to harware sleep mode and latency of sleep is not very deterministic -->
        <!-- 0: polling mode; 1: call usleep to sleep (configurable period); 2: call sem_timedwait to sleep (~50us period); else: poling mode -->
        <BbuPoolSleepEnable>1</BbuPoolSleepEnable>
        <!-- Set usleep period if BbuPoolSleepEnable is 1. Valid value is 1~255, unit micro-second. Value 0 means use default setting, which is 10us now -->
        <BbuPoolSleepPeriod>0</BbuPoolSleepPeriod>
        <!-- Set BBU Pool thread suspend period if suspend thread API is called. Valid value is 1~65535, unit micro-second. Value 0 means use default setting, which is 550us now -->
        <BbuPoolSuspendPeriod>0</BbuPoolSuspendPeriod>

        <!-- Priority Of All BBU Cores -->
        <BbuPoolThreadCorePriority>94</BbuPoolThreadCorePriority>
        <!-- Policy for All BBU Cores [0: SCHED_FIFO 1: SCHED_RR] -->
        <BbuPoolThreadCorePolicy>0</BbuPoolThreadCorePolicy>

        <!-- BBUPool Worker Thread Cores (Bit mask of all cores that are used for BBU Pool in Decimal or Hex [needs to start with "0x"]) -->
        <BbuPoolThreadDefault_0_63>0xF0</BbuPoolThreadDefault_0_63>
        <BbuPoolThreadDefault_64_127>0x0</BbuPoolThreadDefault_64_127>
        <BbuPoolThreadDefault_128_191>0x0</BbuPoolThreadDefault_128_191>
        <BbuPoolThreadDefault_192_255>0x0</BbuPoolThreadDefault_192_255>

        <!-- BBUPool Worker Thread Cores dedicated for SRS processing in case of Massive MIMO Configs. Mask needs to be a subset of BbuPoolThreadDefault_0_63 or BbuPoolThreadDefault_64_127 -->
        <!-- (Bit mask of all cores that are used for BBU Pool in Decimal or Hex [needs to start with "0x"]) -->
        <BbuPoolThreadSrs_0_63>0x0</BbuPoolThreadSrs_0_63>
        <BbuPoolThreadSrs_64_127>0x0</BbuPoolThreadSrs_64_127>
        <BbuPoolThreadSrs_128_191>0x0</BbuPoolThreadSrs_128_191>
        <BbuPoolThreadSrs_192_255>0x0</BbuPoolThreadSrs_192_255>

        <!-- BBUPool Worker Thread Cores dedicated for DL beam  processing in case of Massive MIMO Configs. Mask needs to be a subset of BbuPoolThreadDefault_0_63 or BbuPoolThreadDefault_64_127 -->
        <!-- (Bit mask of all cores that are used for BBU Pool in Decimal or Hex [needs to start with "0x"]) -->
        <BbuPoolThreadDlbeam_0_63>0x0</BbuPoolThreadDlbeam_0_63>
        <BbuPoolThreadDlbeam_64_127>0x0</BbuPoolThreadDlbeam_64_127>
        <BbuPoolThreadDlbeam_128_191>0x0</BbuPoolThreadDlbeam_128_191>
        <BbuPoolThreadDlbeam_192_255>0x0</BbuPoolThreadDlbeam_192_255>

        <!-- URLLC Processing Thread (Bit mask of all cores that are used in Decimal or Hex [needs to start with "0x"]) -->
        <BbuPoolThreadUrllc>0x100</BbuPoolThreadUrllc>

        <!-- The number of elements per queue (for new scheduler only). Values need to be comma seperated and a max of 10 queues. -->
        <eBbuPoolNumQueue>512, 512, 512, 512</eBbuPoolNumQueue>

        <!-- Number of ping pong context to use for scheduler. THis is needed mainly for TDD scenarios so UL is prioritized over DL. Range [1-4] -->
        <eBbuPoolNumContext>1</eBbuPoolNumContext>

        <!-- Maximum Number of contexts to fetch by each consumer thread. This is used only if eBbuPoolNumContext>1. Range [1-eBbuPoolNumContext] -->
        <eBbuPoolMaxContextFetch>1</eBbuPoolMaxContextFetch>

        <!-- Enable internal print of statistics from New Scheduler Library. 0: Off, 1: On. -->
        <eBbuPoolPrintFlag>0</eBbuPoolPrintFlag>

        <!-- Enable FEC Only Task List for 5GNR L1 Application. This is used to test the FEC Enq/Deq Operations with hardware. 0: Off, 1: On. -->
        <eBbuPoolFecOnlyList>0</eBbuPoolFecOnlyList>

        <!-- Number of numa nodes from which BBUPool worker thread cores are allocated. Range [1-2] -->
        <eBbuPoolNumNumaNode>1</eBbuPoolNumNumaNode>

        <!-- Numa node affinity of each cell (Bit mask of all cell in Decimal or Hex [needs to start with "0x"]) -->
        <eBbuPoolNumaNodeAffinityMask0>0x0</eBbuPoolNumaNodeAffinityMask0>
        <eBbuPoolNumaNodeAffinityMask1>0x0</eBbuPoolNumaNodeAffinityMask1>

        <!-- Enable / Disable Power Savings option -->
        <eBbuPoolPowerSavingsEnable>1</eBbuPoolPowerSavingsEnable>

        <!-- 0: Collect Statistics  0: Disable 1: Enable -->
        <eBbuPoolCollectPowerStats>0</eBbuPoolCollectPowerStats>

        <!-- 0: Disable all power savings -->
        <!-- 1: Enable core consolidation with Static tables -->
        <!-- 2: Enable core consolidation with AI trained model -->
        <eBbuPoolPowerSavingsMode>2</eBbuPoolPowerSavingsMode>

        <!-- CoreMask to use when consolidating cores. To be removed later -->
        <eBbuPoolPowerCoreMask>0x10000000100</eBbuPoolPowerCoreMask>

        <!-- Sample Massive MIMO AI/ML model for power optimization. Trained using real world traffic model -->
        <eBbuPoolAiModelMMimo>table/ai_ml/massive_mimo_model.txt</eBbuPoolAiModelMMimo>

        <!-- Sample FDD 20Mhz AI/ML model for power optimization. Trained using real world traffic model -->
        <eBbuPoolAiModelFdd>table/ai_ml/fdd_20mhz_model.txt</eBbuPoolAiModelFdd>

        <!-- 0: eBBUPool stops when pipeline not completed happens (default value); -->
        <!-- others: eBBUPool invalids the waiting events for imcompleted pipeline and continues to run, the unsent phy2mac wls blocks will be cached in L1 for further slots' use -->
        <eBbuPoolNonStopMode>0</eBbuPoolNonStopMode>
    </BbuPoolConfig>

    <Fpga>
        <!-- Time advance added in FPGA from PPS. This is to sync with RRU -->
        <FrontHaulTimeAdvance>7450</FrontHaulTimeAdvance>

        <!-- Number of ports used from FPGA. 4Ports: 462607 (0x70F0F) 2Ports: 459523 (0x70303) -->
        <nEthPorts>462607</nEthPorts>
        <!-- phase compensation enable flag 0:disablle 1:enable -->
        <nPhaseCompFlag>0</nPhaseCompFlag>

        <!-- Version Numbers on FPGA tested with each release -->
        <!-- FEC Version for mmWave -->
        <nFecFpgaVersionMu3>0x20010900</nFecFpgaVersionMu3>

        <!-- FEC Version for sub3 and sub6 -->
        <nFecFpgaVersionMu0_1>0x0423D420</nFecFpgaVersionMu0_1>

        <!-- Front Haul Version for mmWave -->
        <nFhFpgaVersionMu3>0x8001000F</nFhFpgaVersionMu3>

        <!-- Front Haul Version for sub3 and sub6 -->
        <nFhFpgaVersionMu0_1>0x90010008</nFhFpgaVersionMu0_1>
    </Fpga>

    <StreamStats>
        <!-- If this is set to 1, L1 statistics are streamed over UDP to the desitnation address and port -->
        <StreamStats>0</StreamStats>

        <!-- Destination IP Address to stream the stats -->
        <StreamIp>127.0.0.1</StreamIp>

        <!-- IP Port used to create UDP socket -->
        <StreamPort>2000</StreamPort>
    </StreamStats>

    <InfoTraceTool>
        <!-- If this is set to 1, Info Trace Tool will be enable, 0 means disable -->
        <nInfoTraceToolEn>0</nInfoTraceToolEn>

        <!-- If this is set to 1, Info Trace Tool will catch DL APIs, 0 means won't catch -->
        <nApisDlEn>1</nApisDlEn>

        <!-- If this is set to 1, Info Trace Tool will catch UL APIs, 0 means won't catch -->
        <nApisUlEn>1</nApisUlEn>

        <!-- If this is set to 1, Info Trace Tool will catch PDSCH payload APIs, 0 means won't catch -->
        <nApisPdschPayloadEn>0</nApisPdschPayloadEn>

        <!-- If this is set to 1, Info Trace Tool will catch PUSCH payload APIs, 0 means won't catch -->
        <nApisPuschPayloadEn>0</nApisPuschPayloadEn>

        <!-- If this is set to 1, Info Trace Tool will print APIs detail in apis.txt, 0 means won't print -->
        <nApisPrintEn>0</nApisPrintEn>

        <!-- Info Trace Tool Threads (Single core id value): Core, priority, Policy [0: SCHED_FIFO 1: SCHED_RR] -->
        <InfoTraceToolThread>1, 99, 0</InfoTraceToolThread>

        <!-- Destination IP Address to send Info -->
        <nInfoTraceToolSocketIP>127.0.0.1</nInfoTraceToolSocketIP>

        <!-- IP Port used to create UDP socket -->
        <nInfoTraceToolSocketPort>10000</nInfoTraceToolSocketPort>
    </InfoTraceTool>

    <PhyTraceLog>
        <!-- level and modu mask used to config global variable -->
        <phytracelevelmodumask>0xE1FF</phytracelevelmodumask>

        <!-- sub-module mask used to config PUSCH global bitmask -->
        <phytracesubmodumask0>0x1</phytracesubmodumask0>

        <!-- sub-module mask used to config PDSCH global bitmask -->
        <phytracesubmodumask1>0x1</phytracesubmodumask1>

        <!-- sub-module mask used to config PUCCH global bitmask -->
        <phytracesubmodumask2>0x1</phytracesubmodumask2>

        <!-- sub-module mask used to config PDCCH global bitmask -->
        <phytracesubmodumask3>0x1</phytracesubmodumask3>

        <!-- sub-module mask used to config PTRS global bitmask -->
        <phytracesubmodumask4>0x1</phytracesubmodumask4>

        <!-- sub-module mask used to config CSI-RS global bitmask -->
        <phytracesubmodumask5>0x1</phytracesubmodumask5>

        <!-- sub-module mask used to config SRS global bitmask -->
        <phytracesubmodumask6>0x1</phytracesubmodumask6>

        <!-- sub-module mask used to config PRACH global bitmask -->
        <phytracesubmodumask7>0x1</phytracesubmodumask7>

        <!-- sub-module mask used to config SSB global bitmask -->
        <phytracesubmodumask8>0x1</phytracesubmodumask8>

        <!-- Tracelog Threads (Single core id value): Core, priority, Policy [0: SCHED_FIFO 1: SCHED_RR] -->
        <TracelogThread>0, 0, 0</TracelogThread>
    </PhyTraceLog>

</PhyConfig>

